name: Gladia Docker Hub Push

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: false

jobs:
  promote-DH:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Tag image for Docker Hub latest
        run: docker tag docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} gladiaio/gladia:latest

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push latest to Docker Hub
        run: docker push gladiaio/gladia:latest

  promote-gladia:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Tag image for Docker Gladia latest
        run: docker tag docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} docker.gladia.io/gladia:latest

      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}

      - name: Push latest to Gladia registry
        run: docker push docker.gladia.io/gladia:latest

  deploy-aipi-1:
    needs: promote-gladia
    runs-on: [self-hosted, linux, aipi-1]
    steps:
      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}
      
      - name: pull latest
        run: docker pull docker.gladia.io/gladia:latest

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --gpus all --shm-size=5g \
            -p 80:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${{ secrets.TRITON_SERVER_URL }}:8000 \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }} \
            -e STABILITY_KEY=${{ secrets.STABILITY_KEY }} \
            -e MODE=server \
            docker.gladia.io/gladia:latest

      # todo : healthcheck, notify failure

  deploy-aipi-2:
    needs: deploy-aipi-1
    runs-on: [self-hosted, linux, aipi-2]
    steps:
      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}
      
      - name: pull latest
        run: docker pull docker.gladia.io/gladia:latest

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d \
            --name gladia-aipi \
            --gpus all \
            --shm-size=5g \
            -p 80:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${{ secrets.TRITON_SERVER_URL }}:8000 \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }} \
            -e STABILITY_KEY=${{ secrets.STABILITY_KEY }} \
            -e MODE=server \
            docker.gladia.io/gladia:latest

      # todo : healthcheck, notify failure
