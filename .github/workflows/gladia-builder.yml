name: Gladia Builder

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:

  lint:
    if: github.event_name == 'pull_request'
    uses: gladiaio/gladia/.github/workflows/pr-linter.yml@main

  build:
    needs: lint
    if: |-
      ${{ 
        ( !contains(github.event.pull_request.labels.*.name, fromJson('["docs","ci"]')) ||
          !github.event.pull_request.draft ) &&
        always()
      }}
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to NVCR Registry
        uses: docker/login-action@v2
        with:
          registry: nvcr.io
          username: ${{ secrets.NVCR_USERNAME }}
          password: ${{ secrets.NVCR_ACCESS_TOKEN }}

      - name: Build Gladia image
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: docker build -t gladiaio/gladia:ci-${{ github.sha }} -f gpu.Dockerfile .

  test:
    needs: build
    runs-on: [self-hosted, linux, GPU]
    steps:
      - name: Get GPU ID
        id: gpuid
        run: |
          N=$(echo ${{ runner.name }} )
          if [[ ${N: -1} =~ [0-9] ]]; then 
            echo ::set-output name=gpuid::$(echo ${N: -1} )
          else 
            echo "Error : unexpected GPU ID"
            exit 1
          fi
      - name: Start Gladia Container
        run: | 
          docker run -d \
          --cpus 14 --memory 32g --gpus all --shm-size=5g \
          -e IS_CI="True" -e NVIDIA_VISIBLE_DEVICES=${{steps.gpuid.outputs.gpuid}} -e CUDA_VISIBLE_DEVICES=${{steps.gpuid.outputs.gpuid}} \
          -p ${{steps.gpuid.outputs.gpuid}}8000:8000 \
          -v /data/volumes/models:/tmp/gladia/models \
          --name jlmagouille-${{ github.sha	}} gladiaio/gladia:ci-${{ github.sha }}
      - name: Gladia container readiness
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 10
          max_attempts: 36
          retry_on: error
          command: curl http://localhost:${{steps.gpuid.outputs.gpuid}}8000/v2/health/ready --connect-timeout 5

      - name: Give it 5s to make sure it is ready
        run: sleep 5s
        
      - name: Test (try 1/2)
        id: test1
        continue-on-error: True
        run: | 
          docker exec -i \
          -e PR=${{ github.event.pull_request.number }} -e GHT=${{ secrets.GITHUB_TOKEN }} \
          jlmagouille-${{ github.sha }} \
          /bin/bash -c 'echo $PR; eval "$(micromamba shell hook --shell=bash)" && micromamba activate server && cd /app/unit-test/ && python3 test.py --continue_when_failed'
      - name: Logs (Test try 1/2)
        if: ${{ steps.test2.outcome != 'success' }}
        run: |
           docker logs jlmagouille-${{ github.sha }}
      - name: Test (try 2/2)
        if: ${{ steps.test1.outcome != 'success' }}
        run: | 
          docker exec -i \
          -e PR=${{ github.event.pull_request.number }} -e GHT=${{ secrets.GITHUB_TOKEN }} \
          jlmagouille-${{ github.sha }} \
          /bin/bash -c 'echo $PR; eval "$(micromamba shell hook --shell=bash)" && micromamba activate server && cd /app/unit-test/ && python3 test.py'
      - name: Logs (Test try 2/2)
        if: ${{ steps.test2.outcome != 'success' }}
        run: |
           docker logs jlmagouille-${{ github.sha }}
      - name: Clean Docker Test Env
        if: always()
        continue-on-error: True
        run: |
          docker stop jlmagouille-${{ github.sha }}
          docker rm jlmagouille-${{ github.sha }}

  promote:
    needs: test
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Tag built image to latest
        run: docker tag gladiaio/gladia:ci-${{ github.sha }} gladiaio/gladia:latest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      # - name: Push latest to DH regsitry
      #   run: docker push gladiaio/gladia:latest
